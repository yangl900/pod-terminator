apiVersion: v1
kind: Namespace
metadata:
  name: pod-terminator
  labels:
    openpolicyagent.org/webhook: ignore
---
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: webhook-certificate
  namespace: pod-terminator
spec:
  secretName: webhook-certificate
  dnsNames:
  - webhook-server.pod-terminator.svc
  issuerRef:
    name: selfsigned
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned
  namespace: pod-terminator
spec:
  selfSigned: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-server
  namespace: pod-terminator
  labels:
    app: webhook-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook-server
  template:
    metadata:
      labels:
        app: webhook-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1234
      containers:
      - name: server
        image: yangl/pod-termination-webhook:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8443
          name: webhook-api
        volumeMounts:
        - name: webhook-tls-certs
          mountPath: /run/secrets/tls
          readOnly: true
      volumes:
      - name: webhook-tls-certs
        secret:
          secretName: webhook-certificate
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-server
  namespace: pod-terminator
spec:
  selector:
    app: webhook-server
  ports:
    - port: 443
      targetPort: webhook-api
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: pod-terminator
  annotations:
    cert-manager.io/inject-ca-from: pod-terminator/webhook-certificate
webhooks:
  - name: webhook-server.pod-terminator.svc
    clientConfig:
      service:
        name: webhook-server
        namespace: pod-terminator
        path: "/validate"
    rules:
      - operations: [ "DELETE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
---
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: docker/default
  name: pod-terminator-psp
spec:
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - max: 65535
    min: 0
  fsGroup:
    rule: RunAsAny
  hostPID: true
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: health-proxy-security-role
  namespace: pod-terminator
rules:
- apiGroups:
  - policy
  resourceNames:
  - pod-terminator-psp
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: health-proxy-rolebinding
  namespace: pod-terminator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: health-proxy-security-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: pod-terminator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-terminator
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - watch
  - list
  - delete
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - extensions
  resourceNames:
  - pod-terminator-psp
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: terminate-pods
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pod-terminator
subjects:
- kind: ServiceAccount
  name: default
  namespace: pod-terminator
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: health-proxy
  namespace: pod-terminator
  labels:
    app: health-proxy
spec:
  selector:
    matchLabels:
      app: health-proxy
  template:
    metadata:
      labels:
        app: health-proxy
    spec:
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: iptableslock
      containers:
      - name: proxy
        image: yangl/healthproxy:latest
        imagePullPolicy: Always
        securityContext:
          runAsUser: 0
          capabilities:
            drop:
            - ALL
            add:
            - DAC_READ_SEARCH
            - NET_ADMIN
            - NET_RAW
        volumeMounts:
        - mountPath: /run/xtables.lock
          name: iptableslock
        env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10257
          initialDelaySeconds: 10
          periodSeconds: 5
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - key: node.kubernetes.io/unschedulable
          effect: NoSchedule
          operator: Exists